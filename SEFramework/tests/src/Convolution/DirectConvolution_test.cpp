/** Copyright © 2019 Université de Genève, LMU Munich - Faculty of Physics, IAP-CNRS/Sorbonne Université
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */
//
// Created by aalvarez on 8/17/18.
//

#include <boost/test/unit_test.hpp>
#include <ElementsKernel/Real.h>
#include "SEUtils/TestUtils.h"
#include "SEFramework/Convolution/DirectConvolution.h"

using namespace SourceXtractor;

struct DirectConvolution_Fixture {
  DirectConvolution<SeFloat, PaddedImage<SeFloat>> direct;

  DirectConvolution_Fixture() : direct{VectorImage<SeFloat>::create(
    3, 3,
    std::vector<SeFloat>{
      1, 2, 3,
      4, 5, 6,
      7, 8, 9
    })} {
  }
};

//----------------------------------------------------------------------------

BOOST_AUTO_TEST_SUITE (DirectConvolution_test)

//----------------------------------------------------------------------------

BOOST_FIXTURE_TEST_CASE ( Convolve_test, DirectConvolution_Fixture ) {
  auto image = VectorImage<SeFloat>::create(5, 5, std::vector<SeFloat>{
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
  });


  direct.convolve(image);

  auto expected = VectorImage<SeFloat>::create(5, 5, std::vector<SeFloat>{
    1.0, 2.0, 3.0, 0.0, 0.0,
    4.0, 5.0, 6.0, 0.0, 0.0,
    7.0, 8.0, 9.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
  });

  for (auto x = 0; x < expected->getWidth(); ++x) {
    for (auto y = 0; y < expected->getHeight(); ++y) {
      auto ev = expected->getValue(x, y);
      auto iv = image->getValue(x, y);
      if (Elements::isNotEqual(ev, iv)) {
        BOOST_ERROR("Mismatch at " << x << 'x' << y << ": " << ev << " != " << iv);
      }
    }
  }
}

//----------------------------------------------------------------------------

BOOST_FIXTURE_TEST_CASE ( Convolve_not_squared_test, DirectConvolution_Fixture ) {
  auto image = VectorImage<SeFloat>::create(5, 3, std::vector<SeFloat>{
    0.0, 0.5, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
  });


  direct.convolve(image);

  auto expected = VectorImage<SeFloat>::create(5, 3, std::vector<SeFloat>{
    2.0,  3.5,  5.0, 3.0, 0.0,
    3.5,  8.0,  9.5, 6.0, 0.0,
    0.0,  7.0,  8.0, 9.0, 0.0,
  });

  BOOST_CHECK(compareImages(expected, image, 1e-5, 1e-4));
}

//----------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(ConvolveGaussian_test) {
  auto psf = VectorImage<SeFloat>::create(5, 5, std::vector<SeFloat>{
      0.0057491 , 0.00679176, 0.00717976, 0.00679176, 0.0057491 ,
      0.02576569, 0.03043856, 0.03217745, 0.03043856, 0.02576569,
      0.04248044, 0.05018471, 0.05305165, 0.05018471, 0.04248044,
      0.02576569, 0.03043856, 0.03217745, 0.03043856, 0.02576569,
      0.0057491 , 0.00679176, 0.00717976, 0.00679176, 0.0057491 });

  auto img = VectorImage<SeFloat>::create(10, 10, std::vector<SeFloat>{
      1.96412803e-05, 1.16211438e-04, 4.40867600e-04, 1.07237757e-03,
      1.67250526e-03, 1.67250526e-03, 1.07237757e-03, 4.40867600e-04,
      1.16211438e-04, 1.96412803e-05, 1.16211438e-04, 6.87587468e-04,
      2.60847850e-03, 6.34492950e-03, 9.89570114e-03, 9.89570114e-03,
      6.34492950e-03, 2.60847850e-03, 6.87587468e-04, 1.16211438e-04,
      4.40867600e-04, 2.60847850e-03, 9.89570114e-03, 2.40705553e-02,
      3.75410037e-02, 3.75410037e-02, 2.40705553e-02, 9.89570114e-03,
      2.60847850e-03, 4.40867600e-04, 1.07237757e-03, 6.34492950e-03,
      2.40705553e-02, 5.85498315e-02, 9.13156930e-02, 9.13156930e-02,
      5.85498315e-02, 2.40705553e-02, 6.34492950e-03, 1.07237757e-03,
      1.67250526e-03, 9.89570114e-03, 3.75410037e-02, 9.13156930e-02,
      1.42418101e-01, 1.42418101e-01, 9.13156930e-02, 3.75410037e-02,
      9.89570114e-03, 1.67250526e-03, 1.67250526e-03, 9.89570114e-03,
      3.75410037e-02, 9.13156930e-02, 1.42418101e-01, 1.42418101e-01,
      9.13156930e-02, 3.75410037e-02, 9.89570114e-03, 1.67250526e-03,
      1.07237757e-03, 6.34492950e-03, 2.40705553e-02, 5.85498315e-02,
      9.13156930e-02, 9.13156930e-02, 5.85498315e-02, 2.40705553e-02,
      6.34492950e-03, 1.07237757e-03, 4.40867600e-04, 2.60847850e-03,
      9.89570114e-03, 2.40705553e-02, 3.75410037e-02, 3.75410037e-02,
      2.40705553e-02, 9.89570114e-03, 2.60847850e-03, 4.40867600e-04,
      1.16211438e-04, 6.87587468e-04, 2.60847850e-03, 6.34492950e-03,
      9.89570114e-03, 9.89570114e-03, 6.34492950e-03, 2.60847850e-03,
      6.87587468e-04, 1.16211438e-04, 1.96412803e-05, 1.16211438e-04,
      4.40867600e-04, 1.07237757e-03, 1.67250526e-03, 1.67250526e-03,
      1.07237757e-03, 4.40867600e-04, 1.16211438e-04, 1.96412803e-05});

  DirectConvolution<SeFloat, PaddedImage<SeFloat>> direct(psf);

  direct.convolve(img);

  auto expected = VectorImage<SeFloat>::create(
      10, 10,
      std::vector<SeFloat>{
          0.000195253, 0.000570689, 0.001181490, 0.001822220, 0.002217480, 0.002217480, 0.001822220, 0.001181490, 0.000570689,
          0.000195253, 0.000704740, 0.002059830, 0.004264420, 0.006577060, 0.008003690, 0.008003690, 0.006577050, 0.004264420,
          0.002059830, 0.000704740, 0.001812890, 0.005298730, 0.010969900, 0.016918900, 0.020588800, 0.020588800, 0.016918900,
          0.010969900, 0.005298730, 0.001812890, 0.003384230, 0.009891490, 0.020478200, 0.031583700, 0.038434500, 0.038434500,
          0.031583700, 0.020478200, 0.009891490, 0.003384230, 0.004617180, 0.013495200, 0.027938800, 0.043090300, 0.052437000,
          0.052437000, 0.043090300, 0.027938800, 0.013495200, 0.004617180, 0.004617180, 0.013495200, 0.027938800, 0.043090300,
          0.052437000, 0.052437000, 0.043090300, 0.027938800, 0.013495200, 0.004617180, 0.003384230, 0.009891500, 0.020478200,
          0.031583700, 0.038434500, 0.038434500, 0.031583700, 0.020478200, 0.009891500, 0.003384230, 0.001812890, 0.005298730,
          0.010969900, 0.016918900, 0.020588800, 0.020588800, 0.016918900, 0.010969900, 0.005298740, 0.001812890, 0.000704740,
          0.002059830, 0.004264420, 0.006577060, 0.008003690, 0.008003690, 0.006577060, 0.004264420, 0.002059830, 0.000704740,
          0.000195253, 0.000570688, 0.001181490, 0.001822220, 0.002217480, 0.002217480, 0.001822220, 0.001181490, 0.000570688,
          0.000195253,
      });

  BOOST_CHECK(compareImages(expected, img));
}

//----------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(ConvolveGaussianOdd_test) {
  auto psf = VectorImage<SeFloat>::create(5, 5, std::vector<SeFloat>{
      0.0057491 , 0.00679176, 0.00717976, 0.00679176, 0.0057491 ,
      0.02576569, 0.03043856, 0.03217745, 0.03043856, 0.02576569,
      0.04248044, 0.05018471, 0.05305165, 0.05018471, 0.04248044,
      0.02576569, 0.03043856, 0.03217745, 0.03043856, 0.02576569,
      0.0057491 , 0.00679176, 0.00717976, 0.00679176, 0.0057491 });

  auto img = VectorImage<SeFloat>::create(
      11, 11,
      std::vector<SeFloat>{
          1.96412803e-05, 9.92491635e-05, 3.49895134e-04, 8.60603159e-04, 1.47680093e-03, 1.76805171e-03, 1.47680093e-03,
          8.60603159e-04, 3.49895134e-04, 9.92491635e-05, 1.96412803e-05, 9.92491635e-05, 5.01514987e-04, 1.76805171e-03,
          4.34870549e-03, 7.46240846e-03, 8.93412498e-03, 7.46240846e-03, 4.34870549e-03, 1.76805171e-03, 5.01514987e-04,
          9.92491635e-05, 3.49895134e-04, 1.76805171e-03, 6.23312750e-03, 1.53310198e-02, 2.63081351e-02, 3.14965562e-02,
          2.63081351e-02, 1.53310198e-02, 6.23312750e-03, 1.76805171e-03, 3.49895134e-04, 8.60603159e-04, 4.34870549e-03,
          1.53310198e-02, 3.77082239e-02, 6.47075711e-02, 7.74690276e-02, 6.47075711e-02, 3.77082239e-02, 1.53310198e-02,
          4.34870549e-03, 8.60603159e-04, 1.47680093e-03, 7.46240846e-03, 2.63081351e-02, 6.47075711e-02, 1.11038636e-01,
          1.32937383e-01, 1.11038636e-01, 6.47075711e-02, 2.63081351e-02, 7.46240846e-03, 1.47680093e-03, 1.76805171e-03,
          8.93412498e-03, 3.14965562e-02, 7.74690276e-02, 1.32937383e-01, 1.59154943e-01, 1.32937383e-01, 7.74690276e-02,
          3.14965562e-02, 8.93412498e-03, 1.76805171e-03, 1.47680093e-03, 7.46240846e-03, 2.63081351e-02, 6.47075711e-02,
          1.11038636e-01, 1.32937383e-01, 1.11038636e-01, 6.47075711e-02, 2.63081351e-02, 7.46240846e-03, 1.47680093e-03,
          8.60603159e-04, 4.34870549e-03, 1.53310198e-02, 3.77082239e-02, 6.47075711e-02, 7.74690276e-02, 6.47075711e-02,
          3.77082239e-02, 1.53310198e-02, 4.34870549e-03, 8.60603159e-04, 3.49895134e-04, 1.76805171e-03, 6.23312750e-03,
          1.53310198e-02, 2.63081351e-02, 3.14965562e-02, 2.63081351e-02, 1.53310198e-02, 6.23312750e-03, 1.76805171e-03,
          3.49895134e-04, 9.92491635e-05, 5.01514987e-04, 1.76805171e-03, 4.34870549e-03, 7.46240846e-03, 8.93412498e-03,
          7.46240846e-03, 4.34870549e-03, 1.76805171e-03, 5.01514987e-04, 9.92491635e-05, 1.96412803e-05, 9.92491635e-05,
          3.49895134e-04, 8.60603159e-04, 1.47680093e-03, 1.76805171e-03, 1.47680093e-03, 8.60603159e-04, 3.49895134e-04,
          9.92491635e-05, 1.96412803e-05});

  DirectConvolution<SeFloat, PaddedImage<SeFloat>> direct(psf);

  direct.convolve(img);

  auto expected = VectorImage<SeFloat>::create(
      11, 11,
      std::vector<SeFloat>{
          0.000135256, 0.000390936, 0.000843803, 0.001402990, 0.001864140, 0.00204078, 0.00186414, 0.00140299, 0.000843803,
          0.000390936, 0.000135256, 0.000467740, 0.001351930, 0.002918030, 0.00485180, 0.00644653, 0.00705739, 0.006446530,
          0.004851800, 0.002918030, 0.001351930, 0.000467740, 0.001206530, 0.00348728, 0.00752701, 0.01251510, 0.016628700,
          0.018204400, 0.016628700, 0.012515100, 0.007527010, 0.003487280, 0.00120653, 0.00236208, 0.00682724, 0.014736000,
          0.024501500, 0.032555000, 0.035639800, 0.032555000, 0.024501500, 0.01473600, 0.00682724, 0.00236208, 0.003528750,
          0.010199300, 0.022014400, 0.036603200, 0.048634300, 0.053242900, 0.04863430, 0.03660320, 0.02201440, 0.010199300,
          0.003528750, 0.004032870, 0.011656400, 0.025159400, 0.041832400, 0.05558230, 0.06084910, 0.05558230, 0.041832400,
          0.025159400, 0.011656400, 0.004032870, 0.003528750, 0.010199300, 0.02201440, 0.03660320, 0.04863430, 0.053242800,
          0.048634300, 0.036603200, 0.022014400, 0.010199300, 0.003528750, 0.00236208, 0.00682724, 0.01473600, 0.024501500,
          0.032555000, 0.035639800, 0.032555000, 0.024501500, 0.014736000, 0.00682724, 0.00236208, 0.00120653, 0.003487280,
          0.007527010, 0.012515100, 0.016628700, 0.018204400, 0.016628700, 0.01251510, 0.00752701, 0.00348728, 0.001206530,
          0.000467740, 0.001351930, 0.002918030, 0.004851800, 0.006446530, 0.00705739, 0.00644653, 0.00485179, 0.002918030,
          0.001351930, 0.000467740, 0.000135256, 0.000390936, 0.000843803, 0.00140299, 0.00186414, 0.00204078, 0.001864140,
          0.001402990, 0.000843803, 0.000390936, 0.000135256,
      });

  BOOST_CHECK(compareImages(expected, img));
}

//----------------------------------------------------------------------------

BOOST_AUTO_TEST_SUITE_END ()

//----------------------------------------------------------------------------
