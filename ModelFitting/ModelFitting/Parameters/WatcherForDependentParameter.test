///**
// * @file WatcherForDependentParameter.h
// *
// * Created on: August 4, 2015
// *     Author: Pierre Dubath
// */
//
//#ifndef WATCHER_FOR_DEPENDENT_PARAMETER__H_
//#define WATCHER_FOR_DEPENDENT_PARAMETER__H_
//
//#include "ModelFitting/Parameters/DependentParameter.h"
//#include "ModelFitting/Parameters/ParameterWatcher.h"
//
//
//namespace ModelFitting {
//
//  /**
//   * @class WatcherForDependentParameter
//   * @brief
//   *    The parameter update notification
//   *
//   * @details
//   *
//   *
//   */
//  class WatcherForDependentParameter : public ParameterWatcher {
//
//  public:
//
//    //WatcherForDependentParameter() = delete;
//
//    WatcherForDependentParameter(const int index, const DependentParameter& dp) :
//    m_index(index), m_dependent_parameter(dp) {
//
//    }
//
//    /**
//     * @brief
//     *    The pure virtual updatedValue(double new_value) method
//     * @details
//     *    The implementation must define the operations that the
//     *    ParameterWather wants to carry out when the parameter
//     *    value is updated. and provided through this method.
//     *
//     * @param new_value
//     *    The updated value of the parameter
//     *
//     */
//    void updatedValue(double new_value) {
//      //m_dependent_parameter.updatedValue(new_value, m_index);
//    }
//
//    /**
//     * @brief Destructor
//     */
//    virtual ~WatcherForDependentParameter() {
//    }
//
//  private:
//
//    const int m_index {};
//
//    const DependentParameter& m_dependent_parameter;
//  };
//
//} // namespace ModelFitting
//
//#endif /* WATCHER_FOR_DEPENDENT_PARAMETER__H_ */
