/*
 * CompactSersicModel.icpp
 *
 *  Created on: Jul 25, 2019
 *      Author: mschefer
 */

#include <math.h>

namespace ModelFitting {

template<typename ImageType>
CompactSersicModel<ImageType>::CompactSersicModel(double sharp_radius,
    std::shared_ptr<BasicParameter> i0, std::shared_ptr<BasicParameter> k, std::shared_ptr<BasicParameter> n,
    std::shared_ptr<BasicParameter> x_scale, std::shared_ptr<BasicParameter> y_scale,
    std::shared_ptr<BasicParameter> rotation, double width, double height,
    std::shared_ptr<BasicParameter> x, std::shared_ptr<BasicParameter> y,
    std::tuple<double, double, double, double> transform)
        : CompactModelBase<ImageType>(x_scale, y_scale, rotation, width, height, x, y, transform),
          m_sharp_radius_squared(float(sharp_radius * sharp_radius)),
          m_i0(i0), m_k(k), m_n(n)
{}

template<typename ImageType>
inline float CompactSersicModel<ImageType>::evaluateModel(const Mat22& transform, float x, float y) const {
  float x2 = x * transform[0] + y * transform[1];
  float y2 = x * transform[2] + y * transform[3];
  float r = std::sqrt(x2*x2 + y2*y2);

  return m_i0->getValue() * std::exp(float(-m_k->getValue() * powf(r, 1. / m_n->getValue())));
}

template<typename ImageType>
inline float CompactSersicModel<ImageType>::samplePixel(const Mat22& transform, int x, int y, unsigned int subsampling) const {
  double acc = 0.;
  for (std::size_t ix=0; ix<subsampling; ++ix) {
    float x_model = (x - 0.5 + (ix+1) * 1.0 / (subsampling+1));
    for (std::size_t iy=0; iy<subsampling; ++iy) {
      float y_model = (y - 0.5 + (iy+1) * 1.0 / (subsampling+1));
      acc += evaluateModel(transform, x_model, y_model);
    }
  }

  return acc / (subsampling*subsampling);
}

template <typename ImageType>
inline float CompactSersicModel<ImageType>::adaptiveSamplePixel(const Mat22& transform, int x, int y, unsigned int max_subsampling, float threshold) const {
  float value = samplePixel(transform, x,y, 1);
  for (unsigned int i=2; i<=max_subsampling; i+=2) {
    float newValue = samplePixel(transform, x,y, i);
    float ratio = newValue / value;
    if (ratio < threshold && ratio > 1.0 / threshold) {
      value = newValue;
      break;
    }
    value = newValue;
  }

  return value;
}


template<typename ImageType>
double CompactSersicModel<ImageType>::getValue(double x, double y) const {
  auto transform = getCombinedTransform(1.0);
  auto area_correction = (1.0 / fabs(m_jacobian[0] * m_jacobian[3] - m_jacobian[1] * m_jacobian[2]));
  return evaluateModel(transform, x, y) * area_correction;
}

template<typename ImageType>
ImageType CompactSersicModel<ImageType>::getRasterizedImage(double pixel_scale, std::size_t size_x, std::size_t size_y) const {
  //std::cout << "]] " << getX() << " " << getY() << "\n";
  using Traits = ImageTraits<ImageType>;

  if (size_x % 2 == 0 || size_y % 2 == 0) {
    throw Elements::Exception() << "Rasterized image dimensions must be odd numbers "
        << "but got (" << size_x << ',' << size_y << ")";
  }

  ImageType image = Traits::factory(size_x, size_y);

  auto transform = getCombinedTransform(pixel_scale);
  float area_correction = (1.0 / fabs(m_jacobian[0] * m_jacobian[3] - m_jacobian[1] * m_jacobian[2])) * pixel_scale * pixel_scale;

  for (int x=0; x<(int)size_x; ++x) {
    int dx = x - size_x / 2;
    for (int y=0; y<(int)size_y; ++y) {
      int dy = y - size_y / 2;
      if (dx*dx + dy*dy < m_sharp_radius_squared) {
        Traits::at(image, x, y) = adaptiveSamplePixel(transform, dx, dy, 8, 1.01) * area_correction;
      } else {
        Traits::at(image, x, y) = evaluateModel(transform, dx, dy) * area_correction;
      }
    }
  }

  return image;
}

}

