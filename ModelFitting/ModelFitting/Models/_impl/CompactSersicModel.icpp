/*
 * CompactSersicModel.icpp
 *
 *  Created on: Jul 25, 2019
 *      Author: mschefer
 */

#include <math.h>

namespace ModelFitting {

template<typename ImageType>
CompactSersicModel<ImageType>::CompactSersicModel(BasicParameter& i0, BasicParameter& k, BasicParameter& n,
              BasicParameter& x_scale, BasicParameter& y_scale,
              BasicParameter& rotation, double width, double height,
              BasicParameter& x, BasicParameter& y, std::tuple<double, double, double, double> transform)
    : CompactModelBase<ImageType>(x_scale, y_scale, rotation, width, height, x, y, transform),
      m_i0(i0.getValue()), m_i0_updater(i0, m_i0),
      m_k(k.getValue()), m_k_updater(k, m_k),
      m_n(n.getValue()), m_n_updater(n, m_n)
{}

template<typename ImageType>
inline float CompactSersicModel<ImageType>::evaluateModel(const Mat22& transform, float x, float y) const {
  float x2 = x * transform[0] + y * transform[1];
  float y2 = x * transform[2] + y * transform[3];
  float r = std::sqrt(x2*x2 + y2*y2);

  return m_i0 * std::exp(float(-m_k * powf(r, 1. / m_n)));
  //return float(m_i0) * std::exp(float(-m_k * r));
}

//template<typename ImageType>
//inline float CompactSersicModel<ImageType>::evaluateModel(const Mat22& transform, double x, double y) const {
//  auto x2 = x * transform[0] + y * transform[1];
//  auto y2 = x * transform[2] + y * transform[3];
//  auto r = std::sqrt(x2*x2 + y2*y2);
//
//  return m_i0 * std::exp(-m_k * std::pow(r, 1. / m_n));
//  //return m_i0 * std::exp(-m_k * r); // TEST
//}

template<typename ImageType>
inline float CompactSersicModel<ImageType>::samplePixel(const Mat22& transform, int x, int y, unsigned int subsampling) const {
  double acc = 0.;
  for (std::size_t ix=0; ix<subsampling; ++ix) {
    float x_model = (x - 0.5 + (ix+1) * 1.0 / (subsampling+1));
    for (std::size_t iy=0; iy<subsampling; ++iy) {
      float y_model = (y - 0.5 + (iy+1) * 1.0 / (subsampling+1));
      acc += evaluateModel(transform, x_model, y_model);
    }
  }

  return acc / (subsampling*subsampling);
}

template <typename ImageType>
inline float CompactSersicModel<ImageType>::adaptiveSamplePixel(const Mat22& transform, int x, int y, unsigned int max_subsampling, float threshold) const {
  float value = samplePixel(transform, x,y, 1);
  for (unsigned int i=2; i<=max_subsampling; i+=2) {
    float newValue = samplePixel(transform, x,y, i);
    float ratio = newValue / value;
    if (ratio < threshold && ratio > 1.0 / threshold) {
      value = newValue;
      break;
    }
    value = newValue;
  }

  return value;
}


template<typename ImageType>
double CompactSersicModel<ImageType>::getValue(double x, double y) const {
  // FIXME do we even need this?
  return 0.0;
}

template<typename ImageType>
ImageType CompactSersicModel<ImageType>::getRasterizedImage(double pixel_scale, std::size_t size_x, std::size_t size_y) const {
  //std::cout << "]] " << getX() << " " << getY() << "\n";
  using Traits = ImageTraits<ImageType>;

  if (size_x % 2 == 0 || size_y % 2 == 0) {
    throw Elements::Exception() << "Rasterized image dimensions must be odd numbers "
        << "but got (" << size_x << ',' << size_y << ")";
  }

  ImageType image = Traits::factory(size_x, size_y);

  // FIXME
  auto transform = getCombinedTransform(pixel_scale);
  float area_correction = (1.0 / fabs(m_jacobian[0] * m_jacobian[3] - m_jacobian[1] * m_jacobian[2])) * pixel_scale * pixel_scale;

  for (std::size_t x=0; x<size_x; ++x) {
    float x_model = x - (size_x-1) / 2.;
    for (std::size_t y=0; y<size_y; ++y) {
      float y_model = y - (size_y-1) / 2.;
      //if (Traits::at(image, x, y) == 0.0) {
      //Traits::at(image, x, y) = samplePixel(transform, x_model, y_model, 4) * area_correction;
      //Traits::at(image, x, y) = adaptiveSamplePixel(transform, x_model, y_model, 8, 1.01)  * area_correction;
      Traits::at(image, x, y) = evaluateModel(transform, x_model, y_model) * area_correction;
      //}
    }
  }
  Traits::at(image, size_x/2, size_y/2) = adaptiveSamplePixel(transform, 0, 0, 8, 1.01)  * area_correction;

  return image;
}

}

