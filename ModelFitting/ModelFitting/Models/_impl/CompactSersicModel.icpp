/*
 * CompactSersicModel.icpp
 *
 *  Created on: Jul 25, 2019
 *      Author: mschefer
 */


#include <iostream>
#include <cmath> // for std::sqrt
#include <assert.h>

#include "ElementsKernel/Exception.h"

#include "SEUtils/Mat22.h"

#include "ModelFitting/Image/ImageTraits.h"

namespace ModelFitting {

/*
namespace _impl {

  template <typename ImageType>
  void addSmooth(ImageType& image, double pixel_scale, ModelComponent& component) {
    using Traits = ImageTraits<ImageType>;
    auto size_x = Traits::width(image);
    auto size_y = Traits::height(image);
    for (std::size_t x=0; x<size_x; ++x) {
      double x_model = x - (size_x-1) / 2.;
      x_model *= pixel_scale;
      for (std::size_t y=0; y<size_y; ++y) {
        double y_model = y - (size_y-1) / 2.;
        y_model *= pixel_scale;
        Traits::at(image, x, y) = component.getValue(x_model, y_model) * pixel_scale*pixel_scale;
      }
    }
  }

} // end of namespace _impl
*/

void MultiplyMatrix2x2(double* a, double* b, double* out) {
}

template<typename ImageType>
CompactSersicModel<ImageType>::CompactSersicModel(BasicParameter& i0, BasicParameter& k, BasicParameter& n,
              BasicParameter& x_scale, BasicParameter& y_scale,
              BasicParameter& rotation, double width, double height,
              BasicParameter& x, BasicParameter& y, std::tuple<double, double, double, double> transform)
    : ExtendedModel<ImageType>({}, x_scale, y_scale, rotation, width, height, x, y),
      m_x_scale(x_scale.getValue()), m_x_scale_updater(x_scale, m_x_scale),
      m_y_scale(y_scale.getValue()), m_y_scale_updater(y_scale, m_y_scale),
      m_rotation(rotation.getValue()), m_rotation_updater(rotation, m_rotation),
      m_i0(i0.getValue()), m_i0_updater(i0, m_i0),
      m_k(k.getValue()), m_k_updater(k, m_k),
      m_n(n.getValue()), m_n_updater(n, m_n)
{
  m_jacobian = Mat22(transform).GetTranspose();
  m_inv_jacobian = m_jacobian.GetInverse();
}


template<typename ImageType>
double CompactSersicModel<ImageType>::getValue(double x, double y) const {
  // FIXME do we even need this?
  return 0.0;
}

template<typename ImageType>
Mat22 CompactSersicModel<ImageType>::getCombinedTransform() const {
  double s, c;
  sincos(m_rotation, &s, &c);

  Mat22 rotation(
      c, s,
      -s, c);

  Mat22 scale(
      1. / m_x_scale, 0.0,
      0.0, 1. / m_y_scale);

  return (scale * rotation) * m_inv_jacobian;
}

template<typename ImageType>
ImageType CompactSersicModel<ImageType>::getRasterizedImage(double pixel_scale, std::size_t size_x, std::size_t size_y) const {
  //std::cout << "]] " << getX() << " " << getY() << "\n";
  using Traits = ImageTraits<ImageType>;

  if (size_x % 2 == 0 || size_y % 2 == 0) {
    throw Elements::Exception() << "Rasterized image dimensions must be odd numbers "
        << "but got (" << size_x << ',' << size_y << ")";
  }

  ImageType image = Traits::factory(size_x, size_y);

  auto m = getCombinedTransform();
  auto area_correction = (1.0 / fabs(m_jacobian[0] * m_jacobian[3] - m_jacobian[1] * m_jacobian[2])) * pixel_scale * pixel_scale;
  //auto area_correction = 1.0;

  for (std::size_t x=0; x<size_x; ++x) {
    double x_model = x - (size_x-1) / 2.;
    x_model *= pixel_scale;
    for (std::size_t y=0; y<size_y; ++y) {
      double y_model = y - (size_y-1) / 2.;
      y_model *= pixel_scale;

      auto x2 = x_model * m[0] + y_model * m[1];
      auto y2 = x_model * m[2] + y_model * m[3];
      auto r = std::sqrt(x2*x2 + y2*y2);
      Traits::at(image, x, y) = m_i0 * std::exp(-m_k * std::pow(r, 1. / m_n)) * area_correction;
    }
  }

  return image;
}

}

