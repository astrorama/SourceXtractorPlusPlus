namespace SExtractor {

/** \page how_to_add_source_property_with_instances HowTo add source property instance computation with configuration

\tableofcontents

The structure of this tutorial is identical to that of two previous \ref how_to_add_source_property 
"HowTo add a new source property computation" and \ref how_to_add_source_property_with_configuration
"HowTo add a new source property computation with configuration". Readers are assumed to have a good 
knowledge of these previous tutorials. We continue to follow a kind of __munimum__ example, in which 
we add the possible generation of multiple instances of a given property.

Our example is that of a (dummy) flag image processing. A arbitrary-sized vector of flag files and
corresponding flag identifiers can be provided through the program options. The same source property (i.e., 
the sum of the flag values over the pixel footprint of the source) is computed for all input 
files provided. For each flag file, a different column (which name is constructed from the
concatenation of a root name and of the identifier provided through configuration) is extracted 
from the corresponding property and output to the catalog.

To mark the similarities (and the differences), the same class names are used  with a __WithInst__ 
post-fix. Note again that not much effort is made here to make a smart example. It is only thought for 
illustration purposes.

\section source_property_impl_with_inst Source Property

Below is our __minimum__ ExamplePropertyWithInst class.

\code{.cpp}
#include "SEFramework/Property/Property.h"

namespace SExtractor {

class ExamplePropertyWithInst : public Property {
public:

  virtual ~ExamplePropertyWithInst() = default;

  ExamplePropertyWithInst(double flag_value_sum) : m_flag_value_sum(flag_value_sum) {}

  double getFlagValueSum() const {
    return m_flag_value_sum;
  }

private:
  double m_flag_value_sum;

}; // End of ExamplePropertyWithInst class
} // namespace SExtractor
\endcode

This class is fully analogous to the previous \ref source_property_impl "ExampleProperty" and we 
refer to it for explanation. 

\section example_configuration_with_inst Configuration

Below is the __configuration__ class, this time the code is separated in a header and an implementation
files.

Here is the ExampleConfWithInst.h header file:

\code{.cpp}
#include "Configuration/Configuration.h"
#include "SEFramework/Image/Image.h"


namespace SExtractor {

class ExampleConfWithInst : public Euclid::Configuration::Configuration {

public:

  virtual ~ExampleConfWithInst() = default;

  ExampleConfWithInst(long manager_id) : Configuration(manager_id) {}

  std::map<std::string, OptionDescriptionList> getProgramOptions() override;

  void preInitialize(const UserValues& args) override;

  void initialize(const UserValues& args) override;


  const std::map<std::string, std::shared_ptr<FlagImage> >& getFlagImageMap () const {
    return m_flag_image_map;
  }

private:

  std::map<std::string, std::shared_ptr<FlagImage>> m_flag_image_map;

}; // End of ExampleConfWithInst class 
} // namespace SExtractor 
\endcode

And the ExampleConfWithInst.cpp implementation file:

\code{.cpp}
#include <boost/filesystem.hpp>
#include "SEFramework/Image/FitsReader.h"
#include "SEImplementation/Plugin/ExamplePluginWithInst/ExampleConfWithInst.h"

namespace po = boost::program_options;
namespace fs = boost::filesystem;

namespace SExtractor {

namespace {
const std::string FLAG_IMAGE_FILES { "ex-flag-images-files" };
const std::string FLAG_IMAGE_IDS { "ex-flag-images-ids" };
}

auto ExampleConfWithInst::getProgramOptions () -> std::map<std::string, OptionDescriptionList> {
  return { {"Flag options", {
        { FLAG_IMAGE_FILES.c_str(), po::value<std::vector<std::string>>()->multitoken(),
          "The FITS files containing flags"},
        { FLAG_IMAGE_IDS.c_str(), po::value<std::vector<std::string>>()->multitoken(),
          "Identifiers of the flag images"},
      }}};
}

void ExampleConfWithInst::preInitialize (const UserValues& args) {
  if (args.count(FLAG_IMAGE_FILES) != 0) {
    auto filenames = args.find(FLAG_IMAGE_FILES)->second.as<std::vector<std::string>>();
    auto ids = args.find(FLAG_IMAGE_IDS)->second.as<std::vector<std::string>>();
    if (filenames.size() != ids.size()) {
      throw Elements::Exception() << "The number of flag IDs do not match the number of files !";
    }
    for (auto filename : filenames) {
      if (!fs::exists(filename)) {
        throw Elements::Exception() << "File " << filename << " does not exist";
      }
    }
  }
}

void ExampleConfWithInst::initialize (const UserValues& args) {
  if (args.count(FLAG_IMAGE_FILES) != 0) {
    auto& filenames = args.find(FLAG_IMAGE_FILES)->second.as<std::vector<std::string>>();
    auto& ids = args.find(FLAG_IMAGE_IDS)->second.as<std::vector<std::string>>();
    for (auto index = 0; index < filenames.size(); index++) {
      m_flag_image_map[ids.at(index)] = std::move(FitsReader<std::int64_t>::readFile(filenames.at(index)));
    }
  }
}
} // SExtractor namespace
\endcode

This code is somewhat similar to the previous \ref example_configuration_with_inst "example".
The __getProgramOptions()__ method is again used to define the specific options with the Boost program 
option syntax described before. In the current example, vector options are defined which allows 
to enter an arbitrary number of flag filenames and identifiers.

The __preInitialize(args)__ method was not implemented in the previous example. Its purpose 
is to define quick checks, which allow to interrupt the program execution as early as possible, 
if the provided options are not fully valid. The checks are recursive over the possible multiple
elements of the vectors and they are carried out only if at least a filename is provided.

The __initialize(args)__ method is also more involved in this example. FITs files are read 
into an appropriate FlagImage data structure and they are stored into a map compose of an 
arbitrary number (as many as input configuration vector elements) of elements, together with
the flag image identifiers used as the map key.

Again, files are opened and stored only if valid filenames are provided through the 
configuration. This makes this configuration optional. Nothing happens if the option 
"ex-flag-images-files" is not provided. 

\section source_task_impl_with_inst SourceTask

Below is the ExampleSourceTaskWithInst example analogous to the \ref source_task_impl 
"ExampleSourceTask". The main method is again __computeProperties(source)__, but now there
are two member variables (they were none before), which will be filled through a constructor 
call with information coming from the configuration. There is however no directed connection
between the __task__ and the __configuration__ classes. Things will be tied together through
the __task factory__ (see next section).

\code{.cpp}
#include "SEFramework/Task/SourceTask.h"
#include "SEImplementation/Property/PixelCoordinateList.h"
#include "SEImplementation/Plugin/DetectionFramePixelValues/DetectionFramePixelValues.h"
#include "SEFramework/Image/Image.h"

namespace SExtractor {

class ExampleSourceTaskWithInst : public SourceTask {

public:

  virtual ~ExampleSourceTaskWithInst() = default;

  ExampleSourceTaskWithInst(std::shared_ptr<FlagImage> flag_image, unsigned int flag_instance) :
    m_flag_image(flag_image), m_flag_instance(flag_instance) {
  }

  virtual void computeProperties(SourceInterface& source) const {
    double sum = 0.0;
    for (auto& coords : source.getProperty<PixelCoordinateList>().getCoordinateList()) {
      sum += m_flag_image->getValue(coords.m_x, coords.m_y);
    }

  source.setIndexedProperty<ExamplePropertyWithInst>(m_flag_instance, sum);
};

private:

  std::shared_ptr<FlagImage> m_flag_image;
  unsigned int m_flag_instance;

}; // End of ExampleSourceTaskWithInst class
} // namespace SExtractor
\endcode

Another important difference, the method __source.setIndexedProperty<ExamplePropertyWithInst>(m_flag_instance, sum)__
now replaces the previous __source.setProperty<...>(...)__. This method takes care of calling the property 
constructor ignoring the first __m_flag_instance__ parameter, i.e., ExamplePropertyWithInst(sum). It then
attaches the new property to the source using the __m_flag_instance__ integer. In this way, an arbitrary number of 
__ExamplePropertyWithInst__ properties can be stored in the source providing they have been attached with different
__m_flag_instance__. They can later be retrieved with a __source.getProperty(instance_num)__ method call.

\section example_task_factory_with_inst TaskFactory

The task factory is analogous to the previous \ref example_task_factory_with_conf "example",
but with extra complications to manage the possible property multiplicity. The flag 
identifiers coming from the configuration are stored in a vector of string, while the different 
FlagImage are put in a map. The map key is a PropertyId object which is built from the property
type __and__ instance index.

\code{.cpp}
#include <memory>
#include "SEFramework/Task/TaskFactory.h"
#include "SEImplementation/Plugin/ExamplePluginWithInst/ExampleConfWithInst.h"
#include "SEImplementation/Plugin/ExamplePluginWithInst/ExamplePropertyWithInst.h"
#include "SEImplementation/Plugin/ExamplePluginWithInst/ExampleSourceTaskWithInst.h"

namespace SExtractor {

class ExampleTaskFactoryWithInst: public TaskFactory {
public:

  virtual ~ExampleTaskFactoryWithInst () = default;

  void reportConfigDependencies (Euclid::Configuration::ConfigManager& manager) const {
    manager.registerConfiguration<ExampleConfWithInst>();
  }

  void configure (Euclid::Configuration::ConfigManager& manager) {
    auto flag_image_map_from_conf = manager.getConfiguration<ExampleConfWithInst>().getFlagImageMap();
    unsigned int instance_idx = 0;
    for (auto& flag_name_image : flag_image_map_from_conf) {
      m_instance_names.emplace_back(flag_name_image.first);
      auto property_id = PropertyId::create<ExamplePropertyWithInst>(instance_idx);
      m_flag_image_map[property_id] = flag_name_image.second;
      instance_idx++;
    }
  }

  virtual std::shared_ptr<Task> createTask (const PropertyId& property_id) const {
    if (m_flag_image_map.find(property_id) != m_flag_image_map.end()) {
      auto& flag_image = m_flag_image_map.at(property_id);
      return std::make_shared<ExampleSourceTaskWithInst>(flag_image, property_id.getIndex());
    }
    return nullptr;
  }

  void registerPropertyInstances (OutputRegistry& output_registry) {
      output_registry.registerPropertyInstances<ExamplePropertyWithInst>(m_instance_names);
  }

private:

  std::map<PropertyId, std::shared_ptr<FlagImage>> m_flag_image_map;
  std::vector<std::string> m_instance_names;

};

} // namespace SExtractor
\endcode

The __createTask(property_id)__ now has a property instance index dimension. Different tasks 
can be created for different PropertyId (i.e., different property indices for a given type).

The __reportConfigDependencies(...)__ method must be implemented to declare configuration 
dependencies. Here, there is no other dependency than the ExampleConfWithConf itself.

\section example_plugin_with_inst Plugin

Although it is belwo seperated in a header and implementation files, the plugin is again 
almost identical to those of the previous two examples (see \ref example_plugin 
"ExamplePlugin" and \ref example_plugin_with_conf "ExamplePluginWithConf". There is only 
one registered catalog column output, but the main difference is the 
__plugin_api.getOutputRegistry().enableOutput<ExamplePropertyWithInst>();__, which specifies
that this column will always be an output (unlike the two previous cases where the output 
columns were optional, i.e., to be specifically requested with a ad hoc option). The logic in 
the current example is that when a flag file is input through the configuration, the output 
column is always produced. But if no flag files are provided nothing is computed and output.

Here is the ExamplePluginWithInst.h header file:

\code{.cpp}
#include "SEFramework/Plugin/Plugin.h"

namespace SExtractor {

class ExamplePluginWithInst : public Plugin {

public:

  virtual ~ExamplePluginWithInst() = default;

  virtual void registerPlugin(PluginAPI& plugin_api) override;

  virtual std::string getIdString() const override;

}; // End of TestPlugin class
}
\endcode

And the ExamplePluginWithInst.cpp implementation file:

\code{.cpp}
#include "SEFramework/Plugin/StaticPlugin.h"
#include "SEImplementation/Plugin/ExamplePluginWithInst/ExamplePluginWithInst.h"
#include "SEImplementation/Plugin/ExamplePluginWithInst/ExamplePropertyWithInst.h"
#include "SEImplementation/Plugin/ExamplePluginWithInst/ExampleTaskFactoryWithInst.h"

namespace SExtractor {

static StaticPlugin<ExamplePluginWithInst> example_plugin_with_inst;

void ExamplePluginWithInst::registerPlugin (PluginAPI& plugin_api) {
  plugin_api.getTaskFactoryRegistry().registerTaskFactory<ExampleTaskFactoryWithInst, ExamplePropertyWithInst>();

  plugin_api.getOutputRegistry().registerColumnConverter<ExamplePropertyWithInst, double>("FLAG_SUM",
      [](const ExamplePropertyWithInst& prop) {
        return prop.getFlagValueSum();
      });

  plugin_api.getOutputRegistry().enableOutput<ExamplePropertyWithInst>();
}

std::string ExamplePluginWithInst::getIdString () const {
  return "example_plugin_with_inst";
}

}
\endcode

The statement __static StaticPlugin<ExamplePluginWithConf> example_plugin_with_conf;__ must appear 
to registers our example  plugin as a static plugin (i.e., which must be compiled with SExtractor). Other types of plugin will
be described later. 

*/
}